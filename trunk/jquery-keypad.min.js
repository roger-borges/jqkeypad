(function (a) { var b = { init: function (b) { return this.each(function () { var c = a(this), d = c.data("jqKeyPad"), e = a("<div />", { text: c.attr("title") }); var f = { 8: "backspace", 9: "tab", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause/break", 20: "capslock", 27: "escape", 33: "pageup", 34: "pagedown", 35: "end", 36: "home", 37: "leftarrow", 38: "uparrow", 39: "rightarrow", 40: "downarrow", 45: "insert", 46: "delete", 91: "windowleft", 92: "windowright", 93: "select", 144: "numlock", 145: "scrolllock" }; c.data("specialCharMap", f); if (!d) { a(this).data("jqKeyPad", { target: c, jqKeyPad: e }); b = a.extend({ mode: "numeric", precision: 2, keyPadToShowOnShift: null, keyPadToShowOnUnshift: null, initialKeyPad: null, onButtonCommand: null, onSpecialKeyDown: null, specialKeyCombos: null, onSpecialKeyCombo: null }, b); var g = c.attr("mode"); if (g == "numeric" || g == "alphanumeric") { b.mode = g } if (b.mode == "numeric") { var h = parseInt(c.attr("precision")); if (!isNaN(h) && h > 0) { b.precision = h } } var i = c.attr("initialKeyPad"); if (i != null && i != "") { b.initialKeyPad = i } if (b.initialKeyPad == "" || b.initialKeyPad === undefined) { var j = a(this).children("ul").hide(); var j = a(this).children("ul")[0].show() } else { var k = false; a(this).children("ul").each(function () { var c = a(this).attr("KeyPadName"); if (c == b.initialKeyPad) { a(this).show(); k = true } else { a(this).hide() } }); if (k == false) { var j = a(this).children("ul")[0].show() } } c.data("options", b); if (c.children("#txtEnteredValue").val() != "") { c.data("currentValue", c.children("#txtEnteredValue").val()); c.children("div.KeyPadValue").html(c.data("currentValue")) } a(this).children("ul").children("li").bind("click.jqKeyPad", function () { var d = true; if (b.onButtonCommand != null) { var e = a(this).attr("commandName"); var f = true; if (e === undefined) { f = false } if (f == true) { var g = a(this).attr("commandArgument"); if (e == "ShowPad") { c.jqKeyPad("ShowKeyPad", g) } else { var h = a(this).attr("value"); var i = b.onButtonCommand({ command: e, argument: g, value: h }); if (i == false) { d = false } } } } if (d == true) { if (b.mode == "numeric") { var j = String(a(this).attr("val")); if (j != null && !(j === "undefined")) { var k = j; var l = c.data("currentValue"); if (l == null) { l = k } else if (k == ".") { l = l.toString(); if (l.indexOf(k) == -1) { l = l + k } } else { l = l.toString(); if (l.indexOf(".") == -1) { l = l + k } else { var m = l.indexOf("."); var n = l.substring(m); if (n.length <= b.precision) { l = l + k } } } c.data("currentValue", l); c.children("div.KeyPadValue").html(c.data("currentValue")); c.children("#txtEnteredValue").val(c.data("currentValue")) } } else { var j = String(a(this).attr("val")); if (j != null && !(j === "undefined")) { var k = j; var l = c.data("currentValue"); if (l == null) { l = k } else { l += k } c.data("currentValue", l); c.children("div.KeyPadValue").html(c.data("currentValue")); c.children("#txtEnteredValue").val(c.data("currentValue")) } } } }); a(this).children("ul").children("li.reset").bind("click.jqKeyPad", function () { c.data("currentValue", null); c.children("div.KeyPadValue").html(""); c.children("#txtEnteredValue").val("") }); a(this).children("ul").children("li.back").bind("click.jqKeyPad", function () { var a = c.data("currentValue"); if (a != null && a != "") { a = a.substring(0, a.length - 1); c.data("currentValue", a); c.children("div.KeyPadValue").html(a) } }); a(document).bind("keypress.jqKeyPad", function (d) { var e = String.fromCharCode(d.keyCode ? d.keyCode : d.which); if (e == "\r") { e = "\\r" } var f = true; if (b.onSpecialKeyCombo != null) { for (var g in b.specialKeyCombos) { if (e == b.specialKeyCombos[g]) { if (c.jqKeyPad("IsSpecialKeyDown", g) == true) { if (b.onSpecialKeyCombo({ specialKey: g, regularKey: e }) == false) { f = false } } } } } if (f) { a(c).children("ul").children("li").each(function () { var b = a(this).attr("val"); if (b != null && b == e) { a(this).click(); return false } }) } }); a(document).bind("keyup", function (b) { if (b.keyCode == "16" && c.data("isShift") == true) { c.data("isShift", false); var d = c.data("options").keyPadToShowOnUnshift; if (d != null && d !== undefined) { c.children("ul").each(function () { var b = a(this).attr("KeyPadName"); if (b == d) { a(this).show() } else { a(this).hide() } }) } } if (f[b.keyCode] !== undefined) { c.data("is" + b.keyCode, false); try { console.log(f[b.keyCode] + " up") } catch (e) { } } }); a(document).bind("keydown", function (d) { if (d.shiftKey == true) { var e = c.data("options").keyPadToShowOnShift; if (e != null && e !== undefined) { c.children("ul").each(function () { var b = a(this).attr("KeyPadName"); if (b == e) { a(this).show(); c.data("isShift", true) } else { a(this).hide() } }) } } if (f[d.keyCode] !== undefined) { if (c.data("is" + d.keyCode) != true) { c.data("is" + d.keyCode, true); try { console.log(f[d.keyCode] + " down") } catch (g) { } if (b.onSpecialKeyDown != null) { b.onSpecialKeyDown({ keyCode: d.keyCode, key: f[d.keyCode] }) } } } }) } }) }, destroy: function () { return this.each(function () { var b = a(this), c = b.data("jqKeyPad"); a(window).unbind(".jqKeyPad"); c.jqKeyPad.remove(); b.removeData("jqKeyPad") }) }, GetValue: function () { var b = a(this).data("currentValue"); if (b === undefined) { return "" } else { return b } }, ClearValue: function () { var b = a(this); b.data("currentValue", ""); b.children("div.KeyPadValue").html("") }, ShowKeyPad: function (b) { var c = a(this); var d = false; c.children("ul").each(function () { var c = a(this).attr("KeyPadName"); if (c == b) { a(this).show(); d = true } else { a(this).hide() } }); if (d == false) { var e = a(this).children("ul")[0].show() } }, IsSpecialKeyDown: function (b) { var c = a(this); var d = c.data("specialCharMap"); for (var e in d) { if (d[e] == b) { if (c.data("is" + e) == true) { return true } else { return false } } } } }; a.fn.jqKeyPad = function (c) { if (b[c]) { return b[c].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof c === "object" || !c) { return b.init.apply(this, arguments) } else { a.error("Method " + c + " does not exist on jQuery.jqKeyPad") } } })(jQuery)